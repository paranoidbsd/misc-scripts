#!/bin/sh
# Must be root to play
if [ `id -u` -ne 0 ]; then
  exit 77
fi

# clean up eventually existing old files
for _oldf in /tmp/available_updates.*; do
  rm "${_oldf}" 2>/dev/null
done

# set degree of parallelism for batch operations
DOP=8

# Update audit database if necessary. pkg-audit has no
# --fetch-only, so supply a single pkg chosen by fair dice
# roll to reduce unnecessary processing at this stage
pkg audit -F 'pkg-1.5.0' >/dev/null 2>&1

# Create first temporary file and fill it with origin information
# about ports that can be updated
# Use the index file that was rebuild by available_updates
f_one=`mktemp /tmp/available_updates.XXXXXX`
pkg version -voUL= | awk '{ print $1 }' > $f_one

# Determine the longest current version number, increase it by one
# for use as printf alignment offset.
#
# pkg-query writes its output in two operations, first the version
# then the newline. So when multiple parallel invocations write into
# the same pipe, there can be (and are) writes to the pipe by other
# processes between a version and its newline, leading to lines that
# contain two version numbers and lines that are blank.
# Adding the newline to the format string ensures every version number
# is on its own line, at the cost of a couple more empty lines which
# are filtered out via sed (not really necessary strictly speaking,
# since they would not be the longest line anyway).
version_len=$( xargs -n1 -P${DOP} pkg query '%v\n' < $f_one |\
 sed -n -e '/^$/!p' |\
 wc -L |\
 awk '{ print $1 }' )
version_len=$(( version_len + 1 ))

# Determine the longest origin path, increase it by one for use as
# printf alignment offset
origin_len=$( wc -L $f_one |\
  awk '{ print $1 }' )
origin_len=$(( origin_len + 1 ))

# Start processing tasks in batches of DOP to speed things up.
# wait for the up to DOP-1 tasks that could still be running
# after the loop
count=0
while read origin; do
  recalc_updates_task $origin $origin_len $version_len &
  let count+=1 >/dev/null
  [ $(( count%DOP )) -eq 0 ] && wait
done < $f_one
[ $(( count%DOP )) -ne 0 ] && wait

# Create second temporay file, collect the status files generated
# by recalc_task into it, sort it and write the sorted output back
# into our first temporary file.
# Then move it into the live file location and clean up
f_two=`mktemp /tmp/available_updates.XXXXXX`
for task in /tmp/available_updates.task.*; do
  cat $task >> $f_two
  rm $task
done
sort $f_two > $f_one
mv $f_one /root/available_updates.txt
rm $f_two

# Display the created file
${PAGER:-more} /root/available_updates.txt
